<?php
/**
 * MagPleasure Ltd.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE-CE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magpleasure.com/LICENSE-CE.txt
 *
 * =================================================================
 *                 MAGENTO EDITION USAGE NOTICE
 * =================================================================
 * This package designed for Magento COMMUNITY edition
 * MagPleasure does not guarantee correct work of this extension
 * on any other Magento edition except Magento COMMUNITY edition.
 * Magpleasure does not provide extension support in case of
 * incorrect edition usage.
 * =================================================================
 *
 * @category   MagPleasure
 * @package    Magpleasure_Common
 * @version    0.8.1
 * @copyright  Copyright (c) 2012-2015 MagPleasure Ltd. (http://www.magpleasure.com)
 * @license    http://www.magpleasure.com/LICENSE-CE.txt
 */
?>
<?php
/** @var $this Magpleasure_Common_Block_System_Entity_Form_Element_Tree_Render */
if(Mage::app()->getRequest()->getControllerName() == 'catalog_product_action_attribute') {
    $attributeName = "attributes[{$this->getName()}]";
} else {
    $attributeName = $this->getName();
}
?>
<div id="<?php echo $this->getHtmlId(); ?>_container" class="mp-tree-container">
    <input class="<?php echo $this->getClassName(); ?>" id="<?php echo $this->getHtmlId(); ?>" name="<?php echo $attributeName; ?>" value="<?php echo $this->getValue(); ?>"/>
    <div id="<?php echo $this->getHtmlId(); ?>_label" class="mp-tree-label"></div>
    <div id="<?php echo $this->getHtmlId(); ?>_selector" class="mp-tree-selector" title="<?php echo $this->__("Click here to edit"); ?>" style="display: none;"><?php echo $this->__("Click here to edit"); ?></div>
</div>
<div id="<?php echo $this->getHtmlId(); ?>_content" class="mp-tree-content">
    <div id="<?php echo $this->getHtmlId(); ?>_content_treelist" class="mp-tree-content-treelist"></div>
</div>


<script type="text/javascript">
    //<![CDATA[

    /**
     * Fix ext compatibility with prototype 1.6
     */
    Ext.lib.Event.getTarget = function(e) {
        var ee = e.browserEvent || e;
        return ee.target ? Event.element(ee) : null;
    };

    Ext.tree.TreePanel.Enhanced = function(el, config){
        Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
    };

    Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {

        loadTree : function(config, firstLoad){
            var parameters = config['parameters'];
            var data = config['data'];

            if ((typeof parameters['root_visible']) != 'undefined') {
                this.rootVisible = parameters['root_visible']*1;
            }

            var root = new Ext.tree.TreeNode(parameters);

            this.nodeHash = {};
            this.setRootNode(root);

            if (firstLoad) {
                this.addListener('click', this.categoryClick.createDelegate(this));
            }

            this.loader.buildTree(root, data);
            this.el.dom.innerHTML = '';
            // render the tree
            this.render();
        },

        categoryClick: function(node, e){
            node.getUI().check(!node.getUI().checked());
        }
    });

    var <?php echo $this->getJsObjectName(); ?> = new MpAdminhtmlWidgetFormTree({
        'id': '<?php echo $this->getHtmlId(); ?>',
        'input_id': '<?php echo $this->getHtmlId(); ?>',
        'container_id': '<?php echo $this->getHtmlId(); ?>_container',
        'content_id': '<?php echo $this->getHtmlId(); ?>_content',
        'label_id': '<?php echo $this->getHtmlId(); ?>_label',
        'selector_id': '<?php echo $this->getHtmlId(); ?>_selector',
        'use_debug': <?php echo false ? 'true' : 'false'; ?>,
        'title': '<?php echo $this->escapeHtml($this->getTitle()); ?>',
        'buttons': <?php echo $this->getButtonsJson(); ?>,
        'tree': new Ext.tree.TreePanel.Enhanced('<?php echo $this->getHtmlId(); ?>_content_treelist', {
            animate:          false,
            loader:           treeLoader,
            enableDD:         false,
            containerScroll:  true,
            selModel:         new Ext.tree.CheckNodeMultiSelectionModel(),
            rootVisible:      <?php echo $this->getRootVisible() ? 'true' : 'false'; ?>,
            useAjax:          false,
            currentNodeId:    false,
            addNodeTo:        false,
            rootUIProvider:   Ext.tree.CheckboxNodeUI
        }),
        'root_data': <?php echo $this->getRootJson(); ?>,
        'leafs_data': <?php echo $this->getLeafsJson(); ?>
    });

    var treeLoader;
    Ext.onReady((function(){
        var treeLoader = new Ext.tree.TreeLoader({
            dataUrl: null
        });

        treeLoader.createNode = function(config){
            config.uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            var _node = Object.clone(config);
            if (config.children && !config.children.length) {
                delete(config.children);
                node = new Ext.tree.AsyncTreeNode(config);
            } else {
                node = new Ext.tree.TreeNode(config);
            }

            return node;
        };

        treeLoader.buildTree = function(parent, config){
            if (!config) return null;

            if (parent && config && config.length){
                for (var i = 0; i < config.length; i++) {
                    config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                    var node;
                    var _node = Object.clone(config[i]);
                    if (_node.children && !_node.children.length) {
                        delete(_node.children);
                        node = new Ext.tree.AsyncTreeNode(_node);
                    } else {
                        node = new Ext.tree.TreeNode(config[i]);
                    }
                    parent.appendChild(node);
                    node.loader = node.getOwnerTree().loader;
                    if (_node.children) {
                        this.buildTree(node, _node.children);
                    }
                }
            }
        };

        treeLoader.buildHash = function(node){
            var hash = {};

            hash = this.toArray(node.attributes);

            if (node.childNodes.length>0 || (node.loaded==false && node.loading==false)) {
                hash['children'] = new Array;

                for (var i = 0, len = node.childNodes.length; i < len; i++) {
                    if (!hash['children']) {
                        hash['children'] = new Array;
                    }
                    hash['children'].push(this.buildHash(node.childNodes[i]));
                }
            }

            return hash;
        };

        treeLoader.toArray = function(attributes) {
            var data = {};
            for (var key in attributes) {
                var value = attributes[key];
                data[key] = value;
            }

            return data;
        };

        treeLoader.on("beforeload", function(treeLoader, node) {
            treeLoader.baseParams.id = node.attributes.id;
        });

        treeLoader.on("load", function(treeLoader, node, config) {
            varienWindowOnload();
        });

        <?php echo $this->getJsObjectName(); ?>.tree.loader = treeLoader;

    }).bind(treeLoader).bind(<?php echo $this->getJsObjectName(); ?>));

    //]]>
</script>
